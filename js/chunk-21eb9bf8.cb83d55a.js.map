{"version":3,"sources":["webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/core-js/internals/this-number-value.js","webpack:///./node_modules/decimal.js/decimal.js","webpack:///./node_modules/core-js/modules/es.string.sub.js","webpack:///./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack:///./node_modules/core-js/internals/create-html.js","webpack:///./node_modules/core-js/internals/string-html-forced.js","webpack:///./node_modules/core-js/modules/es.number.to-fixed.js","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./node_modules/core-js/modules/es.symbol.iterator.js","webpack:///./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack:///./node_modules/core-js/modules/es.symbol.description.js"],"names":["toInteger","toString","requireObjectCoercible","module","exports","count","str","this","result","n","Infinity","RangeError","classof","value","TypeError","globalScope","Decimal","inexact","quadrant","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","length","PI_PRECISION","P","toStringTag","digitsToString","d","i","k","ws","indexOfLastWord","w","getZeroString","checkInt32","min","max","Error","checkRoundingDigits","rm","repeating","di","r","rd","ceil","convertBase","baseIn","baseOut","j","arrL","arr","strL","indexOf","charAt","reverse","cosine","Ctor","x","len","y","isZero","tinyPow","taylorSeries","times","cos2x","minus","plus","absoluteValue","abs","constructor","s","finalise","e","clampedTo","clamp","NaN","gt","cmp","comparedTo","xdL","ydL","xd","yd","xs","ys","cos","pr","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","rep","t","t3","t3plusx","isFinite","toExponential","slice","divide","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","sub","xe","xLTy","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","sin2_x","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","clone","isDecimalInstance","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hypot","log10","log2","random","hasOwnProperty","arguments","Uint32Array","copy","$","createHTML","forcedStringHTMLMethod","target","proto","forced","_typeof","Symbol","iterator","quot","string","attribute","S","p1","fails","METHOD_NAME","split","thisNumberValue","repeat","nativeToFixed","acc","multiply","data","index","c2","dataToString","call","FORCED","fractionDigits","number","fractDigits","_defineProperties","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","defineWellKnownSymbol","_classCallCheck","instance","DESCRIPTORS","global","has","isObject","f","copyConstructorProperties","NativeSymbol","undefined","description","EmptyStringDescriptionStore","SymbolWrapper","symbolPrototype","symbolToString","native","regexp","get","symbol","desc"],"mappings":"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","file":"js/chunk-21eb9bf8.cb83d55a.js","sourcesContent":["'use strict';\nvar toInteger = require('../internals/to-integer');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.es/ecma262/#sec-string.prototype.repeat\nmodule.exports = function repeat(count) {\n  var str = toString(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var classof = require('../internals/classof-raw');\n\n// `thisNumberValue` abstract operation\n// https://tc39.es/ecma262/#sec-thisnumbervalue\nmodule.exports = function (value) {\n  if (typeof value != 'number' && classof(value) != 'Number') {\n    throw TypeError('Incorrect invocation');\n  }\n  return +value;\n};\n",";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.3.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","'use strict';\nvar $ = require('../internals/export');\nvar createHTML = require('../internals/create-html');\nvar forcedStringHTMLMethod = require('../internals/string-html-forced');\n\n// `String.prototype.sub` method\n// https://tc39.es/ecma262/#sec-string.prototype.sub\n$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {\n  sub: function sub() {\n    return createHTML(this, 'sub', '', '');\n  }\n});\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar toString = require('../internals/to-string');\n\nvar quot = /\"/g;\n\n// `CreateHTML` abstract operation\n// https://tc39.es/ecma262/#sec-createhtml\nmodule.exports = function (string, tag, attribute, value) {\n  var S = toString(requireObjectCoercible(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + toString(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\n","var fails = require('../internals/fails');\n\n// check the existence of a method, lowercase\n// of a tag and escaping quotes in arguments\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    var test = ''[METHOD_NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar toInteger = require('../internals/to-integer');\nvar thisNumberValue = require('../internals/this-number-value');\nvar repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar nativeToFixed = 1.0.toFixed;\nvar floor = Math.floor;\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar multiply = function (data, n, c) {\n  var index = -1;\n  var c2 = c;\n  while (++index < 6) {\n    c2 += n * data[index];\n    data[index] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\n\nvar divide = function (data, n) {\n  var index = 6;\n  var c = 0;\n  while (--index >= 0) {\n    c += data[index];\n    data[index] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\n\nvar dataToString = function (data) {\n  var index = 6;\n  var s = '';\n  while (--index >= 0) {\n    if (s !== '' || index === 0 || data[index] !== 0) {\n      var t = String(data[index]);\n      s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;\n    }\n  } return s;\n};\n\nvar FORCED = nativeToFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !fails(function () {\n  // V8 ~ Android 4.3-\n  nativeToFixed.call({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.es/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toInteger(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(data, 0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(data, 1e7, 0);\n          j -= 7;\n        }\n        multiply(data, pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(data, 1 << 23);\n          j -= 23;\n        }\n        divide(data, 1 << j);\n        multiply(data, 1, 1);\n        divide(data, 2);\n        result = dataToString(data);\n      } else {\n        multiply(data, 0, z);\n        multiply(data, 1 << -e, 0);\n        result = dataToString(data) + repeat.call('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat.call('0', fractDigits - k) + result\n        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","// `Symbol.prototype.description` getter\n// https://tc39.es/ecma262/#sec-symbol.prototype.description\n'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar has = require('../internals/has');\nvar isObject = require('../internals/is-object');\nvar defineProperty = require('../internals/object-define-property').f;\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\n\nvar NativeSymbol = global.Symbol;\n\nif (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var result = this instanceof SymbolWrapper\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n  symbolPrototype.constructor = SymbolWrapper;\n\n  var symbolToString = symbolPrototype.toString;\n  var native = String(NativeSymbol('test')) == 'Symbol(test)';\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  defineProperty(symbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = isObject(this) ? this.valueOf() : this;\n      var string = symbolToString.call(symbol);\n      if (has(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  $({ global: true, forced: true }, {\n    Symbol: SymbolWrapper\n  });\n}\n"],"sourceRoot":""}